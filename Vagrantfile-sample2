## Vagrant file to provision development environment,This will install necessary tools as part of VM build:
# -*- mode: ruby -*-
# vi: set ft=ruby :

$Provision = <<PROVISION
## INSTALL docker
# add certificates Docker
sudo apt-get install -y apt-transport-https ca-certificates
# add GPG key
sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
sudo su -c "echo 'deb https://apt.dockerproject.org/repo ubuntu-xenial main' > /etc/apt/sources.list.d/docker.list"
sudo apt-get update && sudo apt-get purge lxc-docker && sudo apt-cache policy docker-engine
sudo apt-get install -y --allow-unauthenticated docker-engine && sudo service docker stop && sudo service docker start

## INSTALL docker-compose  
sudo su -c "curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose"
sudo chmod +x /usr/local/bin/docker-compose

## Block firewall/iptables and selinux
[ -n "$(ps -ef|grep firewalld|grep -v grep)" ] && sudo systemctl disable firewalld && sudo systemctl stop firewalld
[ -n "$(which iptables)" ] && sudo iptables -F
[ -f /etc/sysconfig/selinux ] && sudo sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/sysconfig/selinux

## Change SSH setting
sudo sed -i -e '/^PasswordAuthentication / s/ .*/ yes/' /etc/ssh/sshd_config && sudo systemctl restart sshd

## Map hostname in /etc/hosts file
sudo sed -i "2inet.ipv4.ip_forward=1" /etc/sysctl.conf && sudo sysctl -p

## Create dev user for development team,This user will have sudo access
sudo sed -i "2iCREATE_HOME     yes" /etc/login.defs
sudo useradd -s /bin/bash -p $(openssl passwd -1 password) dev 

## Installing Java,git,sudo,python and mongodb-org client
sudo apt-get install -y git \
openjdk-8-jdk-headless \
openssh-client \
python \
sudo \
build-essential \
make \
gcc \
dkms

## Adding user to sudoers group
sudo sed -i 's/^%sudo.*/%sudo ALL=(ALL:ALL) NOPASSWD:ALL/' /etc/sudoers && sudo usermod -aG sudo dev && sudo usermod -aG vagrant dev

## Adding Mongo DB source list
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
sudo echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
sudo rm -rf /var/lib/apt/lists/* && sudo apt-get update -y
sudo apt-get install -y mongodb-org && sudo mkdir -p /data/db

## Mount shared folder,Persistant across reboot
sudo apt-get install virtualbox-guest-utils -y
sudo modprobe -a vboxguest vboxsf vboxvideo
PROVISION

$Rcconfig = <<RCCONFIG
[ -f /etc/modules ] && sudo echo "vboxsf" >> /etc/modules
[ -f /etc/rc.local ] && sudo chmod 777 /etc/rc.local && sudo echo '#!/bin/bash' > /etc/rc.local && sudo echo -e "sudo mount -t vboxsf backup /backup \nsudo mount -t vboxsf vagrant /vagrant" >> /etc/rc.local
[ ! -f /etc/rc.local ] && sudo touch /etc/rc.local && sudo chmod 777 /etc/rc.local && sudo echo '#!/bin/bash' > /etc/rc.local && sudo echo -e "sudo mount -t vboxsf backup /backup \nsudo mount -t vboxsf vagrant /vagrant" >> /etc/rc.local
[ -f /etc/systemd/system/rc-local.service ] && sudo systemctl enable rc-local && sudo systemctl start rc-local
[ ! -f /etc/systemd/system/rc-local.service ] && sudo touch /etc/systemd/system/rc-local.service
sudo cat > /etc/systemd/system/rc-local.service <<ENTRY
[Unit]
Description=/etc/rc.local Compatibility
ConditionPathExists=/etc/rc.local

[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target
ENTRY
sudo systemctl enable rc-local && sudo systemctl start rc-local && sudo chmod 755 /etc/rc.local
RCCONFIG


$Script = <<SCRIPT
for I in vagrant dev
do
usermod -aG docker $I
done
SCRIPT


## Main Vagrantfile Configuration:
Vagrant.configure("2") do |config|
  config.vm.box = "bento/ubuntu-18.04"
  config.vm.box_check_update = false
  config.vm.network :forwarded_port, guest: 22, host: 2322, id: "ssh", auto_correct: true
  # Assign default name to Server:
  config.vm.hostname = "docker"
  #Mount synced_folder inside VM:
   config.vm.synced_folder "backup", "/backup", :mount_options => ['dmode=774','fmode=775'],owner: "vagrant", group: "vagrant", create: true
 ## Please run below command in vagrant terminal to install plugin for vagrant-disksize
     ## vagrant plugin install vagrant-disksize
  config.disksize.size = '50GB'
  config.vm.provision "shell", inline: $Provision, privileged: false
  config.vm.provision "shell", inline: $Script, privileged: true
  config.vm.provision "shell", inline: $Rcconfig, privileged: true
  #config.vm.provision "bootstrap", type: "shell", inline: $bootstrap, privileged: true
  config.vm.provider "virtualbox" do |vb|
    # Do not display the VirtualBox GUI when booting the machine
    vb.gui = false
    # Assign default name to VM:
    vb.name = "devops"
    # Customize the amount of memory on the VM:
    vb.memory = "3072"
  end
end
